// #![no_std]
// #![no_main]
// #![feature(custom_test_frameworks)]
// #![test_runner(crate::test_kern::test_runner)]
// #![reexport_test_harness_main = "test_main"]
// #![feature(abi_x86_interrupt)]
// #![feature(const_mut_refs)]
// #![allow(clippy::empty_loop)]
// #![allow(clippy::needless_return)]
// #![feature(let_chains)]

// // extern crate alloc;

// mod addr;
// mod descriptors;
// mod devices;
// mod interrupts;
// mod sync;
// mod utils;
// use core::{fmt::Write, panic::PanicInfo, alloc::GlobalAlloc, ptr::{null, null_mut}};
// mod datastructures;
// mod io;
// mod logging;

// use bootloader::{
//     bootinfo::{MemoryRegion, MemoryRegionType},
//     BootInfo,
// };
// use utils::asm;
// mod allocator;
// mod cc;
// use crate::{
//     devices::{keyboard::ConsoleInput, vga::{Color, ConsoleDisplay}},
//     io::{
//         reader::READER,
//         writer::{set_color, WRITER},
//     },
//     sync::spinlock::Mutex, allocator::page_alloc::PageAlloc,
// };
// mod test_kern;

// bootloader::entry_point!(kernel_main);

// /// This function is called on panic.
// #[panic_handler]
// fn panic(_info: &PanicInfo) -> ! {
//     set_color(Color::pack(Color::Black, Color::Red));
//     print!("{}", _info);
//     loop {}
// }


// static mut ALLOC: PageAlloc<4096> = PageAlloc::default();


// pub fn kernel_main(bootinfo: &'static BootInfo) -> ! {
//     info!("Starting kernel");
//     #[cfg(test)]
//     test_main();

//     interrupts::setup::interrupt_setup();
//     unsafe { utils::asm::enable_interrupts() }; // this fails if no handler is installed
//                                                 // unsafe { asm::int3() };


//     unsafe { ALLOC.set_boot_infor(bootinfo) };
//     let val = unsafe { cc::func() };
//     // println!("{:#?}", bootinfo);


//     let usable_regions = bootinfo
//         .memory_map
//         .iter()
//         .filter(|region| region.region_type == MemoryRegionType::Usable);

//     println!("{:#?}", bootinfo.physical_memory_offset as *mut ());
//     for region in usable_regions {
//         println!("Setting up apges in region {:?}", region);
//         unsafe { ALLOC.add_region(
//                 region.range.start_addr() + bootinfo.physical_memory_offset,
//                  region.range.end_addr() + bootinfo.physical_memory_offset) };
//     }

//     println!("{:?}", unsafe { ALLOC.free_list.borrow().len() });


//     WRITER.take().display.clear();


//     loop {
//         READER.take().input.process_buf_wait();
//     }

// }
